#include <cstdio>
#include <vector>
#include <algorithm>
#include <iostream>
using namespace std;

// Estructura que representa un proceso
// Nombre, hora inicio y hora final
struct proceso{
    string nombreProceso; // El nombre del proceso
    int horaInicio, horaFinal; // La hora de incio y final del proceso
    // Constructor de la estructura
    proceso(){
        horaInicio =  horaFinal  = 0;
        nombreProceso.clear();
    }//Fin constructor
};// Fin estructura

int numeroDeProcesos; // Valor que representa la cantidad de procesos
vector <proceso> procesos;// Vector que contiene todos los procesos a manejar


bool comparador(proceso A, proceso B){
	if(A.horaInicio != B.horaInicio) return A.horaInicio < B.horaInicio;
	if(A.horaFinal != B.horaFinal) return A.horaFinal > B.horaFinal;
	return A.nombreProceso < B.nombreProceso;
}

int main(int argc, char** argv) {
	freopen("inp.txt","r",stdin);
	
	int maximoTiempoOcupado, ultimoProcesoSeleccionado, cantidadProcesosSeleccionados;
    maximoTiempoOcupado = 0;// Variable que representa el tiempo mÃ¡ximo que se ha ocupado una sala
    scanf("%d", &numeroDeProcesos);// Leemos la cantidad de procesos
    procesos.resize(numeroDeProcesos);// Vector que contiene los procesos a analizar
    
    // for lectura de datos
    for (int i = 0; i < numeroDeProcesos; i++){
		cin >> procesos[i].nombreProceso >> procesos[i].horaInicio >> procesos[i].horaFinal;
	}
	
	sort(procesos.begin(),procesos.end(),comparador);
	
	//for (int i = 0; i < numeroDeProcesos; i++) printf("NOMBRE: %s HORA INICIO: %d HORA FINAL %d\n", procesos[i].nombreProceso.c_str(), procesos[i].horaInicio, procesos[i].horaFinal);
	cantidadProcesosSeleccionados = 0;
	vector <bool> vectorRespuesta;
	vectorRespuesta.assign(numeroDeProcesos,0);
	
	vectorRespuesta[0] = true;
	ultimoProcesoSeleccionado = maximoTiempoOcupado = 0;
	cantidadProcesosSeleccionados++;
	for (int i = 1; i < numeroDeProcesos; i++){
		if (procesos[i].horaInicio >= procesos[ultimoProcesoSeleccionado].horaFinal){
			ultimoProcesoSeleccionado = i;
			vectorRespuesta[i] = true;
			cantidadProcesosSeleccionados++;
		}
	}
	
	printf("%d\n", cantidadProcesosSeleccionados);
	
	for (int i = 0; i < numeroDeProcesos; i++){
		if(vectorRespuesta[i] == 1)
			maximoTiempoOcupado += (procesos[i].horaFinal - procesos[i].horaInicio);
	}
	
	printf("%d\n", maximoTiempoOcupado);
	
	for (int i = 0; i < numeroDeProcesos; i++){
		if(vectorRespuesta[i] == 1)
			printf("%s\n", procesos[i].nombreProceso.c_str());
	}
	
	return 0;
}
